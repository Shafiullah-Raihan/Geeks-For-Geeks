///https://www.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1?page=2&sortBy=submissions

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

ðŸ˜Ž
// } Driver Code Ends
class Solution {
  public:
  
  int solve(int w,int index,vector<int> &wt,vector<int> &val,vector<vector<int>>& dp)
  {
      if(index<0 || w == 0){
          return 0;
      }
      if(dp[index][w] != -1) return dp[index][w];
      
      if(w<wt[index]){
          dp[index][w] =  solve(w,index-1,wt,val,dp);
      }
      else{
          dp[index][w] = max(val[index]+solve(w-wt[index],index-1,wt,val,dp),solve(w,index-1,wt,val,dp));
      }
      return dp[index][w];
  }
  
  
    // Function to return max value that can be put in knapsack of capacity.
    int knapSack(int capacity, vector<int> &val, vector<int> &wt) {
        int n= wt.size();
        vector<vector<int>>dp(n,vector<int>(capacity+1,-1));
        return solve(capacity,n-1,wt,val,dp);
    }
};



ðŸ˜Ž



//{ Driver Code Starts.

int main() {
    // Taking total test cases
    int testCases;
    cin >> testCases;
    cin.ignore();
    while (testCases--) {
        // Reading number of items and capacity
        int numberOfItems, capacity;
        vector<int> weights, values;
        string input;
        int number;

        // Read capacity and number of items
        getline(cin, input);
        stringstream ss(input);
        ss >> capacity;      // The first number is the capacity
        ss >> numberOfItems; // The second number is the number of items

        // Read values
        getline(cin, input);
        ss.clear();
        ss.str(input);
        while (ss >> number) {
            values.push_back(number);
        }

        // Read weights
        getline(cin, input);
        ss.clear();
        ss.str(input);
        while (ss >> number) {
            weights.push_back(number);
        }

        Solution solution;
        cout << solution.knapSack(capacity, values, weights) << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
