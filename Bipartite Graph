///https://www.geeksforgeeks.org/problems/bipartite-graph/1

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
ðŸ˜Ž
class Solution {
  public:
    bool isBipartite(vector<vector<int>>& adj) {
        int n = adj.size();
        vector<int>color(n,-1);
        queue<int>q;
        for(int i=0;i<n;i++)
        {
            if(color[i] == -1)
            {
                q.push(i);
                color[i] = 0;
                while(!q.empty())
                {
                    int node = q.front();
                    q.pop();
                    for(auto u : adj[node])
                    {
                        if(color[u] == -1)
                        {
                            q.push(u);
                            color[u] = 1 - color[node];
                        }
                        else if(color[node] == color[u])
                        {
                            return false;
                        }
                    }
                    
                }
                
            }
            
        }
        return true;
    }
};
ðŸ˜Ž
//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj(V);
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isBipartite(adj);
        if (ans)
            cout << "true\n";
        else
            cout << "false\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
