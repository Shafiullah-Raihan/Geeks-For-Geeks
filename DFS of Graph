///https://www.geeksforgeeks.org/problems/depth-first-traversal-for-a-graph/1?page=1&category=DFS&sortBy=submissions

//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
ðŸ˜Ž
class Solution {
  public:
    // Function to return a list containing the DFS traversal of the graph.
    
    void dfs(int i,vector<vector<int>>& adj,int n,vector<bool>& vis,vector<int>& ans)
    {
        vis[i] = true;
        ans.push_back(i);
       
        for(auto u: adj[i])
        {
            if(!vis[u])
            {
                dfs(u,adj,n,vis,ans);
               
            }
            
        }
         //ans.push_back(i);
    }
    
    vector<int> dfsOfGraph(vector<vector<int>>& adj) {
        int n = adj.size();
        vector<bool>vis(n,false);
        vector<int>ans;
        //stack<int>st;
        
        for(int i=0;i<n;i++)
        {
            if(!vis[i])
            {
                dfs(i,adj,n,vis,ans);
            }
        }
        // vector<int>ans;
        // while(!st.empty())
        // {
        //     ans.push_back(st.top());
        //     st.pop();
            
        // }
        return ans;
        
    }
};
ðŸ˜Ž
//{ Driver Code Starts.

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;

        vector<vector<int>> adj(
            V); // Use vector of vectors instead of array of vectors.

        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        Solution obj;
        vector<int> ans = obj.dfsOfGraph(adj);
        for (int i = 0; i < ans.size(); i++) {
            cout << ans[i] << " ";
        }
        cout << endl;
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
