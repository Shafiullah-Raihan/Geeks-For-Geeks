///https://www.geeksforgeeks.org/problems/edit-distance3702/1?page=1&difficulty=Hard&sortBy=submissions

//{ Driver Code Starts
// Initial Template for C++
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

ðŸ˜Ž
class Solution {
  public:
  
  int dp[501][501]; 
    int fun(string s, string t, int pos1, int pos2) {
       
        if (pos1 == 0)
            return pos2; 
                         
        if (pos2 == 0)
            return pos1; 
                         

        int& ans = dp[pos1][pos2];
       
        if (ans != -1)
            return ans;

        
        if (s[pos1 - 1] == t[pos2 - 1]) {
            return ans = fun(s, t, pos1 - 1, pos2 - 1);
        }

      
        return ans = min(1 + fun(s, t, pos1, pos2 - 1),         
                         min(1 + fun(s, t, pos1 - 1, pos2),    
                             1 + fun(s, t, pos1 - 1, pos2 - 1)) 
               );
    }

    // Function to compute the edit distance between two strings
    int editDistance(string& s1, string& s2) {
      memset(dp, -1, sizeof(dp)); // Initialize DP table with -1
        return fun(s1, s2, s1.size(), s2.size());
    }
    
};
ðŸ˜Ž

//{ Driver Code Starts.

int main() {

    int T;
    cin >> T;
    cin.ignore();
    while (T--) {
        string s1;
        getline(cin, s1);
        string s2;
        getline(cin, s2);
        Solution ob;
        int ans = ob.editDistance(s1, s2);
        cout << ans << "\n";
        cout << "~" << endl;
    }
    return 0;
}

// } Driver Code Ends
