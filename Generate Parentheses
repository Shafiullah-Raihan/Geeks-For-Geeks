///https://www.geeksforgeeks.org/problems/generate-all-possible-parentheses/1


//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
vector<string> AllParenthesis(int n) ;


// } Driver Code Ends
//User function Template for C++
ðŸ˜Ž
// N is the number of pairs of parentheses
// Return list of all combinations of balanced parantheses
class Solution
{
    public:
    
    
    void genPar(int open,int close,string par, vector<string>& final, int n)
    {
        if(open == n && close == n){
            final.push_back(par);
            return;
        }
        
        
        if(open<n){
            genPar(open+1, close, par+"(", final,n);
        }
        
        if(close<open){
            genPar(open, close+1, par+ ")", final,n);
        }
        
        
        
    }
    
    
    vector<string> AllParenthesis(int n) 
    {
        vector<string>final;
        
        if(n>0){
            genPar(0,0,"", final, n);
        }
        return final;
    }
};
ðŸ˜Ž
//{ Driver Code Starts.


int main() 
{ 
	int t;
	cin>>t;
	while(t--)
	{
		int n;
		cin>>n;
		Solution ob;
		vector<string> result = ob.AllParenthesis(n); 
		sort(result.begin(),result.end());
		for (int i = 0; i < result.size(); ++i)
			cout<<result[i]<<"\n";
	
cout << "~" << "\n";
}
	return 0; 
} 

// } Driver Code Ends
