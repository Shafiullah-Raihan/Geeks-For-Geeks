///https://www.geeksforgeeks.org/problems/minimum-cost-to-connect-all-houses-in-a-city/0


//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
ðŸ˜Ž

// } Driver Code Ends
class DSU{
    vector<int>parents,rank;
    public:
        DSU(int n)
        {
            parents.resize(n,-1);
            rank.resize(n,1);
        }
        int find(int x)
        {
            if(parents[x] == -1) return x;
            return parents[x] = find(parents[x]);
        }
        void merge(int x,int y)
        {
            int s1 = find(x),s2 = find(y);
            if(s1 != s2)
            {
                if(rank[s1]<rank[s2]) parents[s1] = s2;
                else if(rank[s1]>rank[s2]) parents[s2] = s1;
                else 
                {
                    parents[s2] = s1;
                    rank[s1] += 1;
                }
            }
        }
};

int krushkals(int n,vector<vector<int>>& edges)
{
    sort(edges.begin(),edges.end());
    DSU dsu(n);
    int ans =0,cnt=0;
    for(auto it: edges)
    {
        int w = it[0],x = it[1],y = it[2];
        if(dsu.find(x) != dsu.find(y))
        {
            dsu.merge(x,y);
            ans += w;
            cnt++;
        }
        if(cnt == n-1) break;
    }
    return ans;
}

class Solution {
  public:
    int minCost(vector<vector<int>>& houses) {
        // code here
        int n = houses.size();
        vector<vector<int>>edges;
        for(int i=0;i<n;i++)
        {
            for(int j=i+1;j<n;j++)
            {
                int cost = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1]- houses[j][1]);
                edges.push_back({cost,i,j});
            }
        }
        int ans = krushkals(n,edges);
        return ans;
        
    }
};

ðŸ˜Ž
//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n;
        vector<vector<int>> edges;

        for (int i = 0; i < n; ++i) {
            vector<int> temp;
            for (int j = 0; j < 2; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;

        cout << obj.minCostCity(edges, n);
        cout << "\n";
        cout << "~" << endl;
    }
}

// } Driver Code Ends
