///https://www.geeksforgeeks.org/problems/minimum-cost-to-connect-all-houses-in-a-city/0


//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;
ðŸ˜Ž

// } Driver Code Ends
class Solution {

private:
    vector<int> parent, size;

    int find_set(int v) {
        if (v == parent[v])
            return v;
        return parent[v] = find_set(parent[v]);
    }

    int union_sets(int a, int b) {
        a = find_set(a);
        b = find_set(b);

        if (a != b) {
            if (size[a] < size[b])
                swap(a, b);

            parent[b] = a;
            size[a] += size[b];
            return 1;
        }
        return 0;
    }

  public:
    int minCostCity(vector<vector<int>>& houses, int n) {
        vector<pair<int, pair<int, int>>> edges;

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int distance = abs(houses[i][0] - houses[j][0]) + abs(houses[i][1] - houses[j][1]);
                edges.push_back({distance, {i, j}});
            }
        }

        parent.resize(n);
        size.resize(n, 1);  

        sort(edges.begin(), edges.end());

        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }

        int total_cost = 0;

        
        int components = n; 
        for (auto& edge : edges) {
            int city1 = edge.second.first;
            int city2 = edge.second.second;
            int cost = edge.first;

            if (union_sets(city1, city2)) {
                total_cost += cost;
                components--;  
            }
        }

        if (components > 1) {
            return -1;
        }

        return total_cost;
    }
};
ðŸ˜Ž
//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, m;
        cin >> n;
        vector<vector<int>> edges;

        for (int i = 0; i < n; ++i) {
            vector<int> temp;
            for (int j = 0; j < 2; ++j) {
                int x;
                cin >> x;
                temp.push_back(x);
            }
            edges.push_back(temp);
        }

        Solution obj;

        cout << obj.minCostCity(edges, n);
        cout << "\n";
        cout << "~" << endl;
    }
}

// } Driver Code Ends
