///https://www.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1?page=1&category=DFS&sortBy=submissions


//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
ðŸ˜Ž
class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool detect(int src, vector<vector<int>>& adj, vector<int>& vis, vector<int>& parent) {
    queue<int> q;
    q.push(src);
    vis[src] = 1;
    parent[src] = -1;

    while (!q.empty()) {
        int node = q.front();
        q.pop();

        for (auto adjacentNode : adj[node]) {
            if (!vis[adjacentNode]) {
                vis[adjacentNode] = 1;
                parent[adjacentNode] = node;
                q.push(adjacentNode);
            } else if (parent[node] != adjacentNode) {
                return true;
            }
        }
    }
    return false;
}
    
    bool isCycle(vector<vector<int>>& adj) {
        int V = adj.size();
        vector<int> vis(V, 0);
        vector<int> parent(V, -1);
        
        for (int i = 0; i < V; i++) {
            if (!vis[i]) {
                if (detect(i, adj, vis, parent))
                    return true;
            }
        }
    return false;
        
        
    }
};

ðŸ˜Ž














//{ Driver Code Starts.
int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj(V);
        for (int i = 0; i < E; i++) {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        Solution obj;
        bool ans = obj.isCycle(adj);
        if (ans)
            cout << "1\n";
        else
            cout << "0\n";

        cout << "~"
             << "\n";
    }
    return 0;
}
// } Driver Code Ends
